require './primality'
require './various'
#:nodoc:
class ProjectEuler
  def self.primo
    puts 'Ingrese un n√∫mero para verificar primalidad: '
    n = gets.chomp.to_i
    if Primality.prime(n)
      puts 'Es primo.'
    else
      puts 'No es primo.'
    end
  end

  def self.problem37
    #---------------------Problem 37-------------------
    # The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
    # Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
    # Note: 2, 3, 5, and 7 are not considered to be truncatable primes.
    cont = 0
    num = 10
    sum = 0
    while cont < 11
      if Primality.prime(num)
        # --
        len = Various.longitud(num)
        cond = true
        (1...len).each do |i|
          if Primality.prime(num / 10**i) && Primality.prime(num % 10**i)
            next
          else
            cond = false
            break
          end
        end
        if cond == true
          cont += 1
          sum += num
          puts num.to_s
        else
          num += 1
          next
        end
      end
      num += 1
    end
    sum
  end

  def self.problem12
    num = 0
    acum = 0
    while 1 < 2
      num += 1
      acum += num
      # break if Various.numdivisores(acum) > 50
      puts "#{acum} - #{Various.numdivisores(acum)}" # if num % 10 == 0
      break if Various.numdivisores(acum) > 500
    end
  end

  def self.problem12_1
    # The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    # 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    # Let us list the factors of the first seven triangle numbers:
    # 1: 1
    # 3: 1,3
    # 6: 1,2,3,6
    # 10: 1,2,5,10
    # 15: 1,3,5,15
    # 21: 1,3,7,21
    # 28: 1,2,4,7,14,28
    # We can see that 28 is the first triangle number to have over five divisors.
    # What is the value of the first triangle number to have over five hundred divisors?
    i = 1
    num = 1
    while Various.numdivisores(num) < 301
      num = 0
      (1..i).each do |j|
        num += j
      end
      i += 1
      puts "#{num} - #{Various.numdivisores(num)}"
    end
    puts num
  end

  def self.problem16
    # 2**15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    # What is the sum of the digits of the number 21000?
    n = 2**1000
    len = Various.longitud(n)
    num = n
    sum = 0
    puts num.to_s
    (1..len).each do |i|
      puts "#{i}. #{num % 10**i / 10**(i - 1)}"
      sum += num % 10**i / 10**(i - 1)
    end
    sum
  end
  # End
end
